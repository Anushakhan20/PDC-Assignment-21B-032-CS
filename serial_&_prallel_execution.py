# -*- coding: utf-8 -*-
"""Serial & Prallel Execution

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/193HL4hDpbK6ncoTWOKsylhOmOUBeNhkg
"""

import pandas as pd
import random
!pip install faker
from faker import Faker
from IPython.display import FileLink, display

# Initialize Faker
faker = Faker()

# Number of students and months
num_students = 100000
months = [
    "January", "February", "March", "April", "May", "June",
    "July", "August", "September", "October", "November", "December"
]

# Function to generate a random major
def generate_random_major():
    majors = [
        "Computer Science", "Biology", "Mathematics", "Physics",
        "Psychology", "Economics", "Engineering", "Medicine",
        "History", "Literature", "Art", "Philosophy"
    ]
    return random.choice(majors)

# Generate student data
student_data = {
    "Student Name": [faker.name() for _ in range(num_students)],
    "Student ID": [f"SID{1000 + i}" for i in range(num_students)],
    "Major": [generate_random_major() for _ in range(num_students)],
}
students_df = pd.DataFrame(student_data)

# Generate fee payment data
fee_data = []
for student_id in student_data["Student ID"]:
    for month in months:
        day = random.randint(1, 28)  # Ensure valid day range for all months
        fee_data.append({
            "Student ID": student_id,
            "Fee Status": "Paid",
            "Payment Date": f"{month} {day}"
        })
fees_df = pd.DataFrame(fee_data)

# Save data to CSV files in the current directory
students_file_path = "students.csv"
fees_file_path = "student_fees.csv"

students_df.to_csv(students_file_path, index=False)
fees_df.to_csv(fees_file_path, index=False)

# Provide links to download the files
display(FileLink(students_file_path, result_html_prefix="Download: "))
display(FileLink(fees_file_path, result_html_prefix="Download: "))

import pandas as pd
import time
from concurrent.futures import ThreadPoolExecutor
import matplotlib.pyplot as plt

students_file_path = "students.csv"
fees_file_path = "student_fees.csv"

def read_students_csv():
    return pd.read_csv(students_file_path)

def read_fees_csv():
    return pd.read_csv(fees_file_path)

# Serial Execution
def serial_execution():
    start_time = time.time()
    read_students_csv()
    read_fees_csv()
    end_time = time.time()
    return end_time - start_time


def parallel_execution():
    start_time = time.time()
    with ThreadPoolExecutor() as executor:
        future_students = executor.submit(read_students_csv)
        future_fees = executor.submit(read_fees_csv)
        future_students.result()
        future_fees.result()
    end_time = time.time()
    return end_time - start_time

serial_time = serial_execution()
parallel_time = parallel_execution()

methods = ['Serial Execution', 'Parallel Execution']
times = [serial_time, parallel_time]

# Plotting the graph
plt.figure(figsize=(8, 5))
plt.bar(methods, times, color=['pink', 'grey'])
plt.title('Execution Time Comparison', fontsize=16)
plt.ylabel('Time (seconds)', fontsize=12)
plt.xlabel('Execution Method', fontsize=12)
plt.ylim(0, max(times) + 0.1)  # Add some padding to the y-axis
for i, v in enumerate(times):
    plt.text(i, v + 0.02, f"{v:.4f} s", ha='center', fontsize=10)

plt.show()